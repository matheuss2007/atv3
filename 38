38- #include <stdio.h> #include <stdlib.h> #include <ctype.h> #include <string.h>

#define MAX 100

typedef struct { int top; char items[MAX]; } Stack;

void initStack(Stack *s) { s->top = -1; }

int isEmpty(Stack *s) { return s->top == -1; }

int isFull(Stack *s) { return s->top == MAX - 1; }

void push(Stack *s, char c) { if (isFull(s)) { printf("Pilha cheia!\n"); return; } s->items[++(s->top)] = c; }

char pop(Stack *s) { if (isEmpty(s)) { printf("Pilha vazia!\n"); return '\0'; } return s->items[(s->top)--]; }

char peek(Stack *s) { if (isEmpty(s)) { return '\0'; } return s->items[s->top]; }

int precedence(char op) { switch (op) { case '+': case '-': return 1; case '*': case '/': return 2; case '^': return 3; default: return 0; } }

void infixToPostfix(const char *infix, char *postfix) { Stack s; initStack(&s);

int i = 0;
int k = 0; 

while (infix[i] != '\0') {
    char c = infix[i];
    
    if (isalnum(c)) { 
        postfix[k++] = c;
    } else if (c == '(') { 
        push(&s, c);
    } else if (c == ')') { 
        while (!isEmpty(&s) && peek(&s) != '(') {
            postfix[k++] = pop(&s);
        }
        pop(&s);
    } else { 
        while (!isEmpty(&s) && precedence(c) <= precedence(peek(&s))) {
            postfix[k++] = pop(&s);
        }
        push(&s, c);
    }
    i++;
}

while (!isEmpty(&s)) {
    postfix[k++] = pop(&s);
}

postfix[k] = '\0'; 
}

int main() { char infix[MAX]; char postfix[MAX];

printf("Digite a expressão infixa: ");
fgets(infix, MAX, stdin);

size_t len = strlen(infix);
if (len > 0 && infix[len - 1] == '\n') {
    infix[len - 1] = '\0';
}

infixToPostfix(infix, postfix);

printf("Expressão pós-fixa: %s\n", postfix);

return 0;
